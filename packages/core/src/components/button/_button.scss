// Copyright 2015 Palantir Technologies, Inc. All rights reserved.
// Licensed under the terms of the LICENSE file distributed with this project.

@import "../../common/variables";
@import "./common";

/*
Button

Markup:
<a role="button" class="pt-button {{.modifier}}" {{:modifier}} tabindex="0">Anchor</a>
<button type="button" class="pt-button pt-icon-add {{.modifier}}" {{:modifier}}>Button</button>

:disabled - Disabled state
.#{$ns}-disabled - Disabled appearance
.#{$ns}-intent-primary - Primary intent
.#{$ns}-intent-success - Success intent
.#{$ns}-intent-warning - Warning intent
.#{$ns}-intent-danger - Danger intent
.#{$ns}-active - Active appearance
.#{$ns}-large - Larger size
.#{$ns}-small - Smaller size
.#{$ns}-fill - Fill parent container

Styleguide pt-button
*/
.#{$ns}-button {
  @include pt-button-base();
  @include pt-button-height($pt-button-height);

  &:empty {
    padding: 0;
  }

  &:disabled,
  &.#{$ns}-disabled {
    cursor: not-allowed;
  }

  &.#{$ns}-fill {
    display: flex;
    width: 100%;
  }

  // default is `text-align: left` so we only need `right` case.
  &.#{$ns}-align-right,
  .#{$ns}-align-right & {
    text-align: right;
  }

  &:not([class*="pt-intent-"]) {
    @include pt-button();
  }

  @each $intent, $colors in $button-intents {
    &.#{$ns}-intent-#{$intent} {
      @include pt-button-intent($colors...);
    }
  }

  &[class*="pt-intent-"] .#{$ns}-button-spinner .#{$ns}-spinner-head {
    stroke: $white;
  }

  &.#{$ns}-loading {
    position: relative;

    &[class*="pt-icon-"]::before {
      visibility: hidden;
    }

    .#{$ns}-button-spinner {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    > :not(.#{$ns}-button-spinner) {
      visibility: hidden;
    }
  }

  /*
  Buttons with icons

  Markup:
  <button type="button" class="pt-button pt-icon-add">Default button</button>
  <button type="button" class="pt-button pt-icon-refresh"></button>
  <button type="button" class="pt-button pt-large pt-icon-add">Large button</button>
  <button type="button" class="pt-button pt-large pt-icon-refresh"></button>

  Styleguide pt-button.#{$ns}-icon
  */

  /*
  Advanced icon usage

  Markup:
  <button type="button" class="pt-button pt-intent-success">
    Next step
    <span class="pt-icon-standard pt-icon-arrow-right pt-align-right"></span>
  </button>
  <button type="button" class="pt-button">
    <span class="pt-icon-standard pt-icon-user"></span>
    Profile settings
    <span class="pt-icon-standard pt-icon-caret-down pt-align-right"></span>
  </button>
  <button type="button" class="pt-button pt-intent-danger">
    Reset
    <span class="pt-icon-standard pt-icon-refresh pt-align-right"></span>
  </button>
  <button type="button" class="pt-button pt-large">
    <span class="pt-icon-standard pt-icon-document"></span>
    upload.txt
    <span class="pt-icon-standard pt-icon-cross pt-align-right"></span>
  </button>

  Styleguide pt-button.#{$ns}-icon-advanced
  */
  &[class*="pt-icon-"] {
    &::before {
      @include pt-icon();
      color: $pt-icon-color;
    }
  }

  #{$icon-classes} {
    color: $pt-icon-color;

    &.#{$ns}-align-right {
      margin-left: $button-icon-spacing;
    }
  }

  // button with SVG icon only (no text or children)
  .#{$ns}-icon:first-child:last-child,
  // if loading, then it contains exactly [spinner, icon]
  .#{$ns}-spinner + .#{$ns}-icon:last-child {
    // center icon horizontally. this works for large buttons too.
    margin: 0 (-($pt-button-height - $pt-icon-size-standard) / 2);
  }

  .#{$ns}-dark & {
    &:not([class*="pt-intent-"]) {
      @include pt-dark-button();

      &[class*="pt-icon-"]::before {
        color: $pt-dark-icon-color;
      }

      #{$icon-classes} {
        color: $pt-dark-icon-color;
      }
    }

    &[class*="pt-intent-"] {
      @include pt-dark-button-intent();

      .#{$ns}-button-spinner .#{$ns}-spinner-head {
        stroke: $dark-progress-head-color;
      }
    }
  }

  &:disabled,
  &.#{$ns}-disabled,
  &[class*="pt-intent-"] {
    // disabled and intent button icon should use same color as text
    // stylelint-disable declaration-no-important
    &::before {
      color: inherit !important;
    }

    #{$icon-classes} {
      color: inherit !important;
    }
    // stylelint-enable declaration-no-important
  }

  /*
  Minimal buttons

  Markup:
  <a role="button" class="pt-button pt-minimal {{.modifier}}" {{:modifier}} tabindex="0">Anchor</a>
  <button type="button" class="pt-button pt-minimal pt-icon-add {{.modifier}}" {{:modifier}}>Button</button>

  .#{$ns}-disabled - Disabled appearance
  .#{$ns}-intent-primary - Primary intent
  .#{$ns}-intent-success - Success intent
  .#{$ns}-intent-warning - Warning intent
  .#{$ns}-intent-danger - Danger intent

  Styleguide pt-button.#{$ns}-minimal
  */

  &.#{$ns}-minimal {
    @include pt-button-minimal();
  }

  &.#{$ns}-large,
  .#{$ns}-large & {
    @include pt-button-height-large();
  }

  &.#{$ns}-small,
  .#{$ns}-small & {
    @include pt-button-height-small();
  }
}

a.#{$ns}-button {
  text-align: center;
  text-decoration: none;
  transition: none;

  &,
  &:hover,
  &:active {
    // override global 'a' styles
    color: $pt-text-color;
  }

  &.#{$ns}-disabled {
    color: $button-color-disabled;
  }
}

.#{$ns}-button-text {
  // default: don't grow to fill but allow shrinking as necessary
  flex: 0 1 auto;

  // when alignment is set, grow to fill and inherit `text-align` set on `.#{$ns}-button`
  .#{$ns}-align-left &,
  .#{$ns}-align-right & {
    flex: 1 1 auto;
  }
}
